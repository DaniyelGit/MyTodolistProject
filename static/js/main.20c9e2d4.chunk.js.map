{"version":3,"sources":["components/EditSpan/EditSpan.module.css","components/Button/Button.tsx","components/InputFiled/InputFiled.tsx","components/EditSpan/EditSpan.tsx","components/Todolist/Todolist.tsx","redux/TodolistReducer/TodolistReducer.ts","redux/TaskReducer/TaskReducer.ts","App.tsx","reportWebVitals.ts","index.tsx","components/Todolist/Todolist.module.css","components/InputFiled/InputFiled.module.css"],"names":["module","exports","Button","value","callBack","className","onClick","InputFiled","placeholder","useState","valueInput","setValueInput","error","setError","addNewTaskHandler","trim","s","inputFiledWrapper","type","inputForTasks","inputError","onChange","e","currentTarget","onKeyPress","key","inputFiledButton","icon","faPlus","errorMessage","EditSpan","title","edit","setEdit","onBlurHandler","editSpan","autoFocus","onBlur","onDoubleClick","Todolist","tasks","todolistID","titleTodolist","removeTask","changeFilterTasks","changeStatusTask","addTask","removeTodolist","editTaskTitle","editTodolistTitle","filteredTasksHandler","valueFilter","todolistWrapper","formForRemoveTodolist","removeTodolistBtn","faTimes","inputFiled","todolist","map","t","todolistItem","isDone","todolistItemCompleted","checkboxTask","checked","taskID","changeStatusHandler","id","tasksTitle","editHandlerForTaskTitle","btnRemove","faTrash","footer","btnFilter","TodolistReducer","state","action","filter","tl","filterValue","TaskReducer","conditionTask","newTask","v1","App","todolistID1","todolistID2","useReducer","todolists","todolistsDispatch","tasksDispatch","removeTaskAC","changeFilterTodolistAC","changeTaskStatusAC","addTaskAC","removeTodolistInTasksAC","editTaskTitleAC","editTodolistTitleAC","addNewTodolistAC","addTodolistInTasksAC","newTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20c9e2d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"editSpan\":\"EditSpan_editSpan__1AMNo\"};","import React from \"react\";\r\nimport s from  './Button.module.css';\r\n\r\ntype ButtonPropsType = {\r\n    value: string | any\r\n    callBack: () => void\r\n    className: string\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({value, callBack, className}) => {\r\n\r\n    const clickHandlerForButton = () => callBack();\r\n\r\n    return (\r\n        <button className={className} onClick={clickHandlerForButton}>{value}</button>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './InputFiled.module.css';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype InputFiledPropsType = {\r\n    callBack: (valueInput: string) => void\r\n    placeholder: string\r\n}\r\n\r\nexport const InputFiled: React.FC<InputFiledPropsType> = ({callBack, placeholder}) => {\r\n\r\n    const [valueInput, setValueInput] = useState<string>(''); // useState for valueInput\r\n    const [error, setError] = useState<string>(''); // useState for error\r\n\r\n    const changeTitleTaskHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValueInput(e.currentTarget.value);\r\n        setError('');\r\n    } // handler for change value input\r\n    const addNewTaskHandler = () => {\r\n        if (valueInput.trim() !== '') {\r\n            callBack(valueInput.trim());\r\n            setValueInput('');\r\n        } else {\r\n            setError('Title is not required!');\r\n        }\r\n    } // handler for add new task\r\n    const keyPressOnEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addNewTaskHandler();\r\n        }\r\n    } // function add task on Enter\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.inputFiledWrapper}>\r\n                <input type=\"text\"\r\n                       className={`${s.inputForTasks} ${error ? s.inputError : ''}`}\r\n                       value={valueInput}\r\n                       placeholder={placeholder}\r\n                       onChange={changeTitleTaskHandler}\r\n                       onKeyPress={keyPressOnEnter}\r\n                />\r\n                <button className={s.inputFiledButton} onClick={addNewTaskHandler}>\r\n                    <FontAwesomeIcon icon={faPlus}/>\r\n                </button>\r\n            </div>\r\n            {error ? <div className={s.errorMessage}>{error}</div> : ''}\r\n        </>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './EditSpan.module.css';\r\n\r\ntype EditSpanPropsType = {\r\n    className: string\r\n    title: string\r\n    callBack: (valueInput: string) => void\r\n}\r\n\r\nexport const EditSpan: React.FC<EditSpanPropsType> = ({className, title, callBack}) => {\r\n\r\n    const [valueInput, setValueInput] = useState<string>(title);\r\n    const [edit, setEdit] = useState<boolean>(false);\r\n\r\n    const onDoubleClickHandler = () => {\r\n        setEdit(true);\r\n    }\r\n    const onBlurHandler = () => {\r\n        setEdit(false);\r\n        callBack(valueInput);\r\n    }\r\n    const onChangeHandlerForInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValueInput(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandlerForInput = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onBlurHandler();\r\n        }\r\n    }\r\n\r\n    return (\r\n        edit\r\n            ? <input\r\n                className={s.editSpan}\r\n                type=\"text\"\r\n                value={valueInput}\r\n                autoFocus\r\n                onBlur={onBlurHandler}\r\n                onChange={onChangeHandlerForInput}\r\n                onKeyPress={onKeyPressHandlerForInput}\r\n            />\r\n            : <span\r\n                className={className} onDoubleClick={onDoubleClickHandler}>{title}</span>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './Todolist.module.css'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTimes, faTrash,} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {filterForTodolist, TasksTypeElements} from \"../../App\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {InputFiled} from \"../InputFiled/InputFiled\";\r\nimport {EditSpan} from \"../EditSpan/EditSpan\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    tasks: Array<TasksTypeElements>\r\n    todolistID: string\r\n    titleTodolist: string\r\n    removeTask: (tasksID: string, todolistID: string) => void\r\n    changeFilterTasks: (filterValue: filterForTodolist, todolistID: string) => void\r\n    changeStatusTask: (todolistID: string, taskID: string, conditionTask: boolean) => void\r\n    addTask: (todolistID: string, valueInput: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    editTaskTitle: (valueInput: string, todolistID: string, taskID: string) => void\r\n    editTodolistTitle: (valueInput: string, todolistID: string) => void\r\n}\r\nexport const Todolist: React.FC<TodolistPropsType> = (\r\n    {\r\n        tasks, todolistID,\r\n        titleTodolist, removeTask, changeFilterTasks,\r\n        changeStatusTask, addTask, removeTodolist,\r\n        editTaskTitle, editTodolistTitle,\r\n    }\r\n) => {\r\n\r\n    const removeTaskHandler = (taskID: string) => {\r\n        removeTask(taskID, todolistID);\r\n    } // Handler for remove task\r\n    const filteredTasksHandler = (valueFilter: filterForTodolist) => changeFilterTasks(valueFilter, todolistID); // Handler for filter\r\n    const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>, taskID: string) => {\r\n        changeStatusTask(todolistID, taskID, e.currentTarget.checked);\r\n    } // Handler for change status\r\n    const removeHandlerForTodolist = () => removeTodolist(todolistID); // handler for remove todolist. button on 57 string.\r\n    const addTaskHandler = (valueInput: string) => {\r\n        addTask(todolistID, valueInput);\r\n    } // handler for add new task\r\n    const editHandlerForTaskTitle = (valueInput: string, taskID: string) => {\r\n        editTaskTitle(valueInput, todolistID, taskID);\r\n    }\r\n    const editHandlerForTodolistTitle = (valueInput: string) => editTodolistTitle(valueInput, todolistID);\r\n\r\n    return (\r\n        <div className={s.todolistWrapper}>\r\n            <div className={s.formForRemoveTodolist}>\r\n                <EditSpan className={s.titleTodolist} title={titleTodolist} callBack={editHandlerForTodolistTitle}/>\r\n                <Button\r\n                    className={s.removeTodolistBtn}\r\n                    callBack={removeHandlerForTodolist}\r\n                    value={<FontAwesomeIcon icon={faTimes}/>}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.inputFiled}>\r\n                <InputFiled callBack={addTaskHandler} placeholder={'Add your new todo'}/>\r\n            </div>\r\n\r\n            <ul className={s.todolist}>\r\n                {tasks.map(t => {\r\n                    return (\r\n                        <li className={`${s.todolistItem} ${t.isDone ? s.todolistItemCompleted : ''}`}>\r\n                            <input className={s.checkboxTask}\r\n                                   type={'checkbox'}\r\n                                   checked={t.isDone}\r\n                                   onChange={(e) => changeStatusHandler(e, t.id)}\r\n                            />\r\n                            <EditSpan className={s.tasksTitle}\r\n                                      title={t.title}\r\n                                      callBack={(valueInput) => editHandlerForTaskTitle(valueInput, t.id)}\r\n                            />\r\n                            <Button\r\n                                className={s.btnRemove}\r\n                                callBack={() => removeTaskHandler(t.id)}\r\n                                value={<FontAwesomeIcon icon={faTrash}/>}\r\n                            />\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n\r\n            <div className={s.footer}>\r\n                <Button\r\n                    className={s.btnFilter}\r\n                    value={'All'}\r\n                    callBack={() => {\r\n                        filteredTasksHandler('all')\r\n                    }}\r\n                />\r\n                <Button\r\n                    className={s.btnFilter}\r\n                    value={'Active'}\r\n                    callBack={() => {\r\n                        filteredTasksHandler('active')\r\n                    }}\r\n                />\r\n                <Button\r\n                    className={s.btnFilter}\r\n                    value={'Completed'}\r\n                    callBack={() => {\r\n                        filteredTasksHandler('completed')\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {filterForTodolist, todolistArr} from \"../../App\";\r\n\r\nexport type ActionsType =\r\n    removeTodolistACType\r\n    | addNewTodolistACType\r\n    | changeFilterTodolistACType\r\n    | editTodolistTitleType;\r\n\r\nexport const TodolistReducer = (state: Array<todolistArr>, action: ActionsType): Array<todolistArr> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id);\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [{id: action.todolistID, title: action.valueInput, filter: 'all'}, ...state];\r\n        }\r\n        case 'CHANGE-FILTER-TODOLIST': {\r\n            return (state.map(tl => tl.id === action.todolistID ? {...tl, filter: action.filterValue} : tl));\r\n        }\r\n        case 'EDIT-TODOLIST-TITLE': {\r\n            return (state.map(tl => tl.id === action.todolistID ? {...tl, title: action.valueInput} : tl));\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntype removeTodolistACType = ReturnType<typeof removeTodolistAC>;\r\nexport const removeTodolistAC = (id: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id\r\n    } as const\r\n}\r\n\r\ntype addNewTodolistACType = ReturnType<typeof addNewTodolistAC>;\r\nexport const addNewTodolistAC = (valueInput: string, todolistID: string) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        valueInput,\r\n        todolistID\r\n    } as const\r\n}\r\n\r\ntype changeFilterTodolistACType = ReturnType<typeof changeFilterTodolistAC>\r\nexport const changeFilterTodolistAC = (filterValue: filterForTodolist, todolistID: string) => {\r\n    return {\r\n        type: 'CHANGE-FILTER-TODOLIST',\r\n        filterValue,\r\n        todolistID\r\n    } as const\r\n}\r\n\r\ntype editTodolistTitleType = ReturnType<typeof editTodolistTitleAC>\r\nexport const editTodolistTitleAC = (valueInput: string, todolistID: string) => {\r\n    return {\r\n        type: 'EDIT-TODOLIST-TITLE',\r\n        valueInput,\r\n        todolistID\r\n    } as const\r\n}","import {TasksType} from \"../../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\ntype ActionsType =\r\n    addTodolistInTasksACType\r\n    | removeTaskACType\r\n    | changeTaskStatusACType\r\n    | addTaskACType\r\n    | editTaskTitleACType\r\n    | removeTodolistInTasksACType\r\n\r\n\r\nexport const TaskReducer = (state: TasksType, action: ActionsType): TasksType => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST-IN-TASKS': {\r\n            return ({...state, [action.todolistID]: []});\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            return ({...state, [action.todolistID]: state[action.todolistID].filter(t => action.taskID !== t.id)});\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return ({\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    isDone: action.conditionTask\r\n                } : t)\r\n            });\r\n        }\r\n        case 'ADD-TASK': {\r\n            const newTask = {id: v1(), title: action.valueInput, isDone: false};\r\n            return ({...state, [action.todolistID]: [newTask, ...state[action.todolistID]]});\r\n        }\r\n        case 'EDIT-TASK-TITLE': {\r\n            return ({...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    title: action.valueInput\r\n                } : t)\r\n            });\r\n        }\r\n        case 'REMOVE-TODOLIST-IN-TASKS': {\r\n            delete state[action.todolistID];\r\n            return {...state};\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntype addTodolistInTasksACType = ReturnType<typeof addTodolistInTasksAC>\r\nexport const addTodolistInTasksAC = (todolistID: string) => {\r\n    return {\r\n        type: 'ADD-TODOLIST-IN-TASKS',\r\n        todolistID\r\n    } as const\r\n}\r\n\r\ntype removeTaskACType = ReturnType<typeof removeTaskAC>;\r\nexport const removeTaskAC = (taskID: string, todolistID: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskID,\r\n        todolistID\r\n    } as const\r\n}\r\n\r\ntype changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>;\r\nexport const changeTaskStatusAC = (todolistID: string, taskID: string, conditionTask: boolean) => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        todolistID,\r\n        taskID,\r\n        conditionTask\r\n    } as const\r\n}\r\n\r\ntype addTaskACType = ReturnType<typeof addTaskAC>;\r\nexport const addTaskAC = (todolistID: string, valueInput: string) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        todolistID,\r\n        valueInput\r\n    } as const\r\n}\r\n\r\ntype editTaskTitleACType = ReturnType<typeof editTaskTitleAC>;\r\nexport const editTaskTitleAC = (valueInput: string, todolistID: string, taskID: string) => {\r\n    return {\r\n        type: 'EDIT-TASK-TITLE',\r\n        valueInput,\r\n        todolistID,\r\n        taskID\r\n    } as const\r\n}\r\n\r\ntype removeTodolistInTasksACType = ReturnType<typeof removeTodolistInTasksAC>\r\nexport const removeTodolistInTasksAC = (todolistID: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST-IN-TASKS',\r\n        todolistID\r\n    } as const\r\n}\r\n\r\n\r\n\r\n","import React, {useReducer} from 'react';\nimport './App.css';\nimport {Todolist} from \"./components/Todolist/Todolist\";\nimport {v1} from \"uuid\";\nimport {InputFiled} from \"./components/InputFiled/InputFiled\";\nimport {\n    addNewTodolistAC,\n    changeFilterTodolistAC,\n    editTodolistTitleAC,\n    removeTodolistAC,\n    TodolistReducer\n} from \"./redux/TodolistReducer/TodolistReducer\";\nimport {\n    addTaskAC,\n    addTodolistInTasksAC,\n    changeTaskStatusAC, editTaskTitleAC,\n    removeTaskAC, removeTodolistInTasksAC,\n    TaskReducer\n} from \"./redux/TaskReducer/TaskReducer\";\n\nexport type filterForTodolist = 'all' | 'active' | 'completed'; // filter for todolist tasks\nexport type todolistArr = {\n    id: string,\n    title: string,\n    filter: filterForTodolist\n} // type for todolist\nexport type TasksTypeElements = {\n    id: string,\n    title: string,\n    isDone: boolean,\n} // type for tasks elements\nexport type TasksType = {\n    [key: string]: Array<TasksTypeElements>;\n} // type for state tasks\n\n\nfunction App() {\n    const todolistID1 = v1();\n    const todolistID2 = v1();\n\n    const [todolists, todolistsDispatch] = useReducer(TodolistReducer, [\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\n    ]);\n\n\n    const [tasks, tasksDispatch] = useReducer(TaskReducer,{\n        [todolistID1]: [\n            {id: v1(), title: 'HTML&CSS', isDone: true},\n            {id: v1(), title: 'NativeJS', isDone: true},\n            {id: v1(), title: 'ReactJS', isDone: false},\n            {id: v1(), title: 'Redux', isDone: false},\n        ],\n        [todolistID2]: [\n            {id: v1(), title: 'Milk', isDone: true},\n            {id: v1(), title: 'Eggs', isDone: true},\n            {id: v1(), title: 'Sausage', isDone: false},\n            {id: v1(), title: 'Potatoes', isDone: false},\n        ]\n    });\n\n    const removeTask = (taskID: string, todolistID: string) => {\n        // setTasks({...tasks, [todolistID]: tasks[todolistID].filter(t => t.id !== taskID)});\n        tasksDispatch(removeTaskAC(taskID, todolistID));\n    } // function for remove task\n    const changeFilterTasks = (filterValue: filterForTodolist, todolistID: string) => {\n        todolistsDispatch(changeFilterTodolistAC(filterValue, todolistID));\n    }; // function for changeFilterTasks\n    const changeStatusTask = (todolistID: string, taskID: string, conditionTask: boolean) => {\n        tasksDispatch(changeTaskStatusAC(todolistID, taskID, conditionTask));\n    } // function change status task\n    const addTask = (todolistID: string, valueInput: string) => {\n        tasksDispatch(addTaskAC(todolistID, valueInput));\n    } // function add new task in todolist\n    const removeTodolist = (todolistID: string) => {\n        todolistsDispatch(removeTodolistAC(todolistID));\n        tasksDispatch(removeTodolistInTasksAC(todolistID))\n    } // function for remove todolist\n    const addNewTodolist = (valueInput: string) => {\n        let todolistID = v1();\n        todolistsDispatch(addNewTodolistAC(valueInput, todolistID));\n        tasksDispatch(addTodolistInTasksAC(todolistID));\n    }\n    const editTaskTitle = (valueInput: string, todolistID: string, taskID: string) => {\n       tasksDispatch(editTaskTitleAC(valueInput, todolistID, taskID));\n    }\n    const editTodolistTitle = (valueInput: string, todolistID: string) => {\n        todolistsDispatch(editTodolistTitleAC(valueInput, todolistID));\n    }\n\n    return (\n        <div className=\"App\">\n            <div className={'wrapperForm'}>\n                <InputFiled callBack={addNewTodolist} placeholder={'Add your new todolist'}/>\n            </div>\n            <div className={'border'}></div>\n\n            <div className={'wrapper'}>\n                {todolists.map(tl => {\n                    let newTasks = tasks[tl.id];\n                    if (tl.filter === 'active') newTasks = newTasks.filter(t => !t.isDone);\n                    if (tl.filter === 'completed') newTasks = newTasks.filter(t => t.isDone)\n                    return (\n                        <Todolist\n                            key={tl.id}\n                            tasks={newTasks}\n                            todolistID={tl.id}\n                            titleTodolist={tl.title}\n                            removeTask={removeTask}\n                            changeFilterTasks={changeFilterTasks}\n                            changeStatusTask={changeStatusTask}\n                            addTask={addTask}\n                            removeTodolist={removeTodolist}\n                            editTaskTitle={editTaskTitle}\n                            editTodolistTitle={editTodolistTitle}\n                        />\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistWrapper\":\"Todolist_todolistWrapper__29Alv\",\"titleTodolist\":\"Todolist_titleTodolist__1qgpq\",\"todolist\":\"Todolist_todolist__1Eyey\",\"formForRemoveTodolist\":\"Todolist_formForRemoveTodolist__1nrw-\",\"removeTodolistBtn\":\"Todolist_removeTodolistBtn__FGtX4\",\"inputFiled\":\"Todolist_inputFiled__1lH7M\",\"todolistItem\":\"Todolist_todolistItem__Jm6ib\",\"todolistItemCompleted\":\"Todolist_todolistItemCompleted__Hgr3X\",\"checkboxTask\":\"Todolist_checkboxTask__uXvOq\",\"btnRemove\":\"Todolist_btnRemove__1oYaJ\",\"footer\":\"Todolist_footer__3qVmr\",\"btnFilter\":\"Todolist_btnFilter__2_aTx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputFiledWrapper\":\"InputFiled_inputFiledWrapper__13ryV\",\"inputForTasks\":\"InputFiled_inputForTasks__P2ZAf\",\"inputFiledButton\":\"InputFiled_inputFiledButton__3zYm6\",\"inputError\":\"InputFiled_inputError__3xvET\",\"errorMessage\":\"InputFiled_errorMessage__1eEtB\"};"],"sourceRoot":""}